From 1efea137baef20415d0c976e3bdff3ad2cf7aade Mon Sep 17 00:00:00 2001
From: Rafael Martins <rmartins@anaconda.com>
Date: Tue, 16 Jul 2024 23:11:41 +0200
Subject: [PATCH 5/6] chromium: avoid using macos 12/13/14 symbols

the non-apple clang always evaluate every macos sdk version check to true, producing
a lot of errors. we need to manually remove each of them to be able to build.

this patch also convert some symbols that were unprotected, to the old symbol that was
still available for the sdk version we build against.
---
 .../base/mac/launch_application_unittest.mm   |  6 +++---
 .../media/webrtc/thumbnail_capturer_mac.mm    | 20 +++++++++----------
 .../app_shim/immersive_mode_controller.mm     |  4 ++--
 .../native_widget_ns_window_bridge.mm         |  8 ++++----
 .../capture/screen_capture_kit_device_mac.mm  |  4 ++--
 .../device/fido/mac/icloud_keychain.mm        |  8 ++++----
 .../audio/mac/audio_device_listener_mac.cc    | 12 +++++------
 .../audio/mac/audio_low_latency_input_mac.cc  | 16 +++++++--------
 .../media/audio/mac/audio_manager_mac.cc      | 18 ++++++++---------
 .../media/audio/mac/core_audio_util_mac.cc    | 14 ++++++-------
 .../media/base/mac/color_space_util_mac.mm    |  6 +++---
 .../media/base/mac/video_frame_mac.mm         |  6 +++---
 .../video_capture_device_avfoundation.mm      | 20 +++++++++----------
 .../mac/vt_video_encode_accelerator_mac.cc    | 16 +++++++--------
 .../chromium/net/cert/x509_util_apple.cc      |  4 ++--
 .../barcode_detection_impl_mac_vision_api.mm  |  6 +++---
 .../breakpad/src/common/mac/arch_utilities.cc | 12 +++++------
 .../dawn/src/dawn/native/metal/BackendMTL.mm  |  6 +++---
 .../cocoa/native_widget_mac_ns_window_host.mm |  4 ++--
 19 files changed, 95 insertions(+), 95 deletions(-)

diff --git a/src/3rdparty/chromium/base/mac/launch_application_unittest.mm b/src/3rdparty/chromium/base/mac/launch_application_unittest.mm
index 6608ad4d7..daeaf856e 100644
--- a/src/3rdparty/chromium/base/mac/launch_application_unittest.mm
+++ b/src/3rdparty/chromium/base/mac/launch_application_unittest.mm
@@ -154,14 +154,14 @@ void SetUp() override {
     // app wasn't registered yet.
     while (true) {
       NSArray<NSURL*>* apps = nil;
-      if (@available(macOS 12.0, *)) {
+      /*if (@available(macOS 12.0, *)) {
         apps = [[NSWorkspace sharedWorkspace]
             URLsForApplicationsWithBundleIdentifier:helper_bundle_id_];
-      } else {
+      } else {*/
         apps =
             apple::CFToNSOwnershipCast(LSCopyApplicationURLsForBundleIdentifier(
                 apple::NSToCFPtrCast(helper_bundle_id_), /*outError=*/nullptr));
-      }
+      /*}*/
       if (apps.count > 0) {
         break;
       }
diff --git a/src/3rdparty/chromium/chrome/browser/media/webrtc/thumbnail_capturer_mac.mm b/src/3rdparty/chromium/chrome/browser/media/webrtc/thumbnail_capturer_mac.mm
index ac5b1a7f6..1680b4aaf 100644
--- a/src/3rdparty/chromium/chrome/browser/media/webrtc/thumbnail_capturer_mac.mm
+++ b/src/3rdparty/chromium/chrome/browser/media/webrtc/thumbnail_capturer_mac.mm
@@ -205,9 +205,9 @@ - (void)stream:(SCStream*)stream didStopWithError:(NSError*)error {
     &capture_mode_options};
 
 CaptureMode GetCaptureModeFeatureParam() {
-  if (@available(macOS 14.0, *)) {
+  /*if (@available(macOS 14.0, *)) {
     return kThumbnailCapturerMacCaptureMode.Get();
-  }
+  }*/
   return CaptureMode::kSCStream;
 }
 
@@ -332,11 +332,11 @@ void SelectSources(const std::vector<ThumbnailCapturer::SourceId>& ids,
       get_shareable_window_callback_(get_shareable_window_callback),
       sample_callback_(sample_callback),
       max_sources_per_cycle_(kThumbnailCapturerMacMaxSourcesPerCycles.Get()) {
-  if (@available(macOS 14.0, *)) {
+  /*if (@available(macOS 14.0, *)) {
     capture_frame_timer_.Start(
         FROM_HERE, base::Milliseconds(1000.0 / max_frame_rate), this,
         &ScreenshotManagerCapturer::OnRecurrentCaptureTimer);
-  }
+  }*/
 }
 
 void ScreenshotManagerCapturer::SelectSources(
@@ -360,10 +360,10 @@ void SelectSources(const std::vector<ThumbnailCapturer::SourceId>& ids,
     // Run the capture code immediately to avoid a short period with empty
     // thumbnails at the top of the list. This is especially useful in the first
     // call to SelectSources().
-    if (@available(macOS 14.0, *)) {
+    /*if (@available(macOS 14.0, *)) {
       OnRecurrentCaptureTimer();
       capture_frame_timer_.Reset();
-    }
+    }*/
   }
 }
 
@@ -856,12 +856,12 @@ void OnCapturedFrame(base::apple::ScopedCFTypeRef<CGImageRef> image,
 }  // namespace
 
 bool ShouldUseThumbnailCapturerMac() {
-  if (@available(macOS 14.0, *)) {
+  /*if (@available(macOS 14.0, *)) {
     return base::FeatureList::IsEnabled(kScreenCaptureKitStreamPickerSonoma);
   }
   if (@available(macOS 13.2, *)) {
     return base::FeatureList::IsEnabled(kScreenCaptureKitStreamPickerVentura);
-  }
+  }*/
   return false;
 }
 
@@ -869,8 +869,8 @@ bool ShouldUseThumbnailCapturerMac() {
 // ShouldUseThumbnailCapturerMac() returns true.
 std::unique_ptr<ThumbnailCapturer> CreateThumbnailCapturerMac() {
   CHECK(ShouldUseThumbnailCapturerMac());
-  if (@available(macOS 13.2, *)) {
+  /*if (@available(macOS 13.2, *)) {
     return std::make_unique<ThumbnailCapturerMac>();
-  }
+  }*/
   NOTREACHED_NORETURN();
 }
diff --git a/src/3rdparty/chromium/components/remote_cocoa/app_shim/immersive_mode_controller.mm b/src/3rdparty/chromium/components/remote_cocoa/app_shim/immersive_mode_controller.mm
index 3cff2cbcf..2af70a0b1 100644
--- a/src/3rdparty/chromium/components/remote_cocoa/app_shim/immersive_mode_controller.mm
+++ b/src/3rdparty/chromium/components/remote_cocoa/app_shim/immersive_mode_controller.mm
@@ -485,9 +485,9 @@ bool IsNSToolbarFullScreenWindow(NSWindow* window) {
 
   // Make sure to make it past the safe area insets, otherwise some portion
   // of the window may still be displayed.
-  if (@available(macOS 12.0, *)) {
+  /*if (@available(macOS 12.0, *)) {
     y += browser_window_.screen.safeAreaInsets.top;
-  }
+  }*/
 
   return y;
 }
diff --git a/src/3rdparty/chromium/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm b/src/3rdparty/chromium/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm
index 7c702f140..b50d1ac90 100644
--- a/src/3rdparty/chromium/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm
+++ b/src/3rdparty/chromium/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm
@@ -1480,15 +1480,15 @@ NSUInteger CountBridgedWindows(NSArray* child_windows) {
     bool can_appear_in_existing_fullscreen_spaces) {
   NSWindowCollectionBehavior collectionBehavior = window_.collectionBehavior;
   if (can_appear_in_existing_fullscreen_spaces) {
-    if (@available(macOS 13.0, *)) {
+    /*if (@available(macOS 13.0, *)) {
       collectionBehavior &= ~NSWindowCollectionBehaviorPrimary;
-    }
+    }*/
     collectionBehavior |= NSWindowCollectionBehaviorFullScreenAuxiliary;
     collectionBehavior &= ~NSWindowCollectionBehaviorFullScreenPrimary;
   } else {
-    if (@available(macOS 13.0, *)) {
+    /*if (@available(macOS 13.0, *)) {
       collectionBehavior |= NSWindowCollectionBehaviorPrimary;
-    }
+    }*/
     collectionBehavior |= NSWindowCollectionBehaviorFullScreenPrimary;
     collectionBehavior &= ~NSWindowCollectionBehaviorFullScreenAuxiliary;
   }
diff --git a/src/3rdparty/chromium/content/browser/media/capture/screen_capture_kit_device_mac.mm b/src/3rdparty/chromium/content/browser/media/capture/screen_capture_kit_device_mac.mm
index 814eab6a5..0e66bc2c5 100644
--- a/src/3rdparty/chromium/content/browser/media/capture/screen_capture_kit_device_mac.mm
+++ b/src/3rdparty/chromium/content/browser/media/capture/screen_capture_kit_device_mac.mm
@@ -449,7 +449,7 @@ void ResetStreamTo(SCWindow* window) override {
     const DesktopMediaID& source) {
   // Although ScreenCaptureKit is available in 12.3 there were some bugs that
   // were not fixed until 13.2.
-  if (@available(macOS 13.2, *)) {
+  /*if (@available(macOS 13.2, *)) {
     switch (source.type) {
       case DesktopMediaID::TYPE_SCREEN:
         // ScreenCaptureKitDeviceMac only supports a single display at a time.
@@ -465,7 +465,7 @@ void ResetStreamTo(SCWindow* window) override {
         // ScreenCaptureKitDeviceMac supports only TYPE_SCREEN and TYPE_WINDOW.
         // https://crbug.com/1176900
         return nullptr;
-    }
+    }*/
 
     IncrementDesktopCaptureCounter(SCREEN_CAPTURER_CREATED);
     IncrementDesktopCaptureCounter(source.audio_share
diff --git a/src/3rdparty/chromium/device/fido/mac/icloud_keychain.mm b/src/3rdparty/chromium/device/fido/mac/icloud_keychain.mm
index 13acff336..38b78241a 100644
--- a/src/3rdparty/chromium/device/fido/mac/icloud_keychain.mm
+++ b/src/3rdparty/chromium/device/fido/mac/icloud_keychain.mm
@@ -469,14 +469,14 @@ bool IsSupported() {
   // functions used are available in 13.3 but we don't want to launch for
   // 13.3 and 13.4 so that we can updated to require 13.5 in the future without
   // removing functionality for anyone.
-  if (@available(macOS 13.5, *)) {
+  /*if (@available(macOS 13.5, *)) {
     return GetSystemInterface()->IsAvailable();
-  }
+  }*/
   return false;
 }
 
 std::unique_ptr<FidoDiscoveryBase> NewDiscovery(uintptr_t ns_window) {
-  if (@available(macOS 13.5, *)) {
+  /*if (@available(macOS 13.5, *)) {
     NSWindow* window = nullptr;
     if (ns_window != kFakeNSWindowForTesting) {
       window = (__bridge NSWindow*)(void*)ns_window;
@@ -484,7 +484,7 @@ bool IsSupported() {
     }
 
     return std::make_unique<Discovery>(window);
-  }
+  }*/
 
   NOTREACHED_NORETURN();
 }
diff --git a/src/3rdparty/chromium/media/audio/mac/audio_device_listener_mac.cc b/src/3rdparty/chromium/media/audio/mac/audio_device_listener_mac.cc
index 047c284d9..94097d9b2 100644
--- a/src/3rdparty/chromium/media/audio/mac/audio_device_listener_mac.cc
+++ b/src/3rdparty/chromium/media/audio/mac/audio_device_listener_mac.cc
@@ -23,32 +23,32 @@ namespace media {
 const AudioObjectPropertyAddress
     AudioDeviceListenerMac::kDefaultOutputDeviceChangePropertyAddress = {
         kAudioHardwarePropertyDefaultOutputDevice,
-        kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMain};
+        kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMaster};
 
 const AudioObjectPropertyAddress
     AudioDeviceListenerMac::kDefaultInputDeviceChangePropertyAddress = {
         kAudioHardwarePropertyDefaultInputDevice,
-        kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMain};
+        kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMaster};
 
 const AudioObjectPropertyAddress
     AudioDeviceListenerMac::kDevicesPropertyAddress = {
         kAudioHardwarePropertyDevices, kAudioObjectPropertyScopeGlobal,
-        kAudioObjectPropertyElementMain};
+        kAudioObjectPropertyElementMaster};
 
 const AudioObjectPropertyAddress
     AudioDeviceListenerMac::kPropertyOutputSampleRateChanged = {
         kAudioDevicePropertyNominalSampleRate, kAudioObjectPropertyScopeGlobal,
-        kAudioObjectPropertyElementMain};
+        kAudioObjectPropertyElementMaster};
 
 const AudioObjectPropertyAddress
     AudioDeviceListenerMac::kPropertyOutputSourceChanged = {
         kAudioDevicePropertyDataSource, kAudioDevicePropertyScopeOutput,
-        kAudioObjectPropertyElementMain};
+        kAudioObjectPropertyElementMaster};
 
 const AudioObjectPropertyAddress
     AudioDeviceListenerMac::kPropertyInputSourceChanged = {
         kAudioDevicePropertyDataSource, kAudioDevicePropertyScopeInput,
-        kAudioObjectPropertyElementMain};
+        kAudioObjectPropertyElementMaster};
 
 class AudioDeviceListenerMac::PropertyListener {
  public:
diff --git a/src/3rdparty/chromium/media/audio/mac/audio_low_latency_input_mac.cc b/src/3rdparty/chromium/media/audio/mac/audio_low_latency_input_mac.cc
index 9642854e2..5abfa36b7 100644
--- a/src/3rdparty/chromium/media/audio/mac/audio_low_latency_input_mac.cc
+++ b/src/3rdparty/chromium/media/audio/mac/audio_low_latency_input_mac.cc
@@ -126,7 +126,7 @@ static AudioDeviceID FindFirstOutputSubdevice(
     AudioDeviceID aggregate_device_id) {
   const AudioObjectPropertyAddress property_address = {
       kAudioAggregateDevicePropertyFullSubDeviceList,
-      kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMaster};
   base::apple::ScopedCFTypeRef<CFArrayRef> subdevices;
   UInt32 size = sizeof(subdevices);
   OSStatus result = AudioObjectGetPropertyData(
@@ -760,10 +760,10 @@ void AUAudioInputStream::SetVolume(double volume) {
   Float32 volume_float32 = static_cast<Float32>(volume);
   AudioObjectPropertyAddress property_address = {
       kAudioDevicePropertyVolumeScalar, kAudioDevicePropertyScopeInput,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
 
   // Try to set the volume for master volume channel.
-  if (IsVolumeSettableOnChannel(kAudioObjectPropertyElementMain)) {
+  if (IsVolumeSettableOnChannel(kAudioObjectPropertyElementMaster)) {
     OSStatus result = AudioObjectSetPropertyData(
         input_device_id_, &property_address, 0, nullptr, sizeof(volume_float32),
         &volume_float32);
@@ -806,7 +806,7 @@ double AUAudioInputStream::GetVolume() {
 
   AudioObjectPropertyAddress property_address = {
       kAudioDevicePropertyVolumeScalar, kAudioDevicePropertyScopeInput,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
 
   if (AudioObjectHasProperty(input_device_id_, &property_address)) {
     // The device supports master volume control, get the volume from the
@@ -853,7 +853,7 @@ bool AUAudioInputStream::IsMuted() {
 
   AudioObjectPropertyAddress property_address = {
       kAudioDevicePropertyMute, kAudioDevicePropertyScopeInput,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
 
   if (!AudioObjectHasProperty(input_device_id_, &property_address)) {
     DLOG(ERROR) << "Device does not support checking master mute state";
@@ -1160,7 +1160,7 @@ int AUAudioInputStream::HardwareSampleRate() {
 
   AudioObjectPropertyAddress default_input_device_address = {
       kAudioHardwarePropertyDefaultInputDevice, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   OSStatus result = AudioObjectGetPropertyData(kAudioObjectSystemObject,
                                                &default_input_device_address, 0,
                                                0, &info_size, &device_id);
@@ -1172,7 +1172,7 @@ int AUAudioInputStream::HardwareSampleRate() {
 
   AudioObjectPropertyAddress nominal_sample_rate_address = {
       kAudioDevicePropertyNominalSampleRate, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   result = AudioObjectGetPropertyData(device_id, &nominal_sample_rate_address,
                                       0, 0, &info_size, &nominal_sample_rate);
   if (result != noErr)
@@ -1197,7 +1197,7 @@ int AUAudioInputStream::GetNumberOfChannelsFromStream() {
   // Get the stream format, to be able to read the number of channels.
   AudioObjectPropertyAddress property_address = {
       kAudioDevicePropertyStreamFormat, kAudioDevicePropertyScopeInput,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   AudioStreamBasicDescription stream_format;
   UInt32 size = sizeof(stream_format);
   OSStatus result = AudioObjectGetPropertyData(
diff --git a/src/3rdparty/chromium/media/audio/mac/audio_manager_mac.cc b/src/3rdparty/chromium/media/audio/mac/audio_manager_mac.cc
index f834373f5..9665791f8 100644
--- a/src/3rdparty/chromium/media/audio/mac/audio_manager_mac.cc
+++ b/src/3rdparty/chromium/media/audio/mac/audio_manager_mac.cc
@@ -57,19 +57,19 @@ static bool GetDeviceChannels(AudioUnit audio_unit,
 
 // Helper method to construct AudioObjectPropertyAddress structure given
 // property selector and scope. The property element is always set to
-// kAudioObjectPropertyElementMain.
+// kAudioObjectPropertyElementMaster.
 static AudioObjectPropertyAddress GetAudioObjectPropertyAddress(
     AudioObjectPropertySelector selector,
     bool is_input) {
   AudioObjectPropertyScope scope = is_input ? kAudioObjectPropertyScopeInput
                                             : kAudioObjectPropertyScopeOutput;
   AudioObjectPropertyAddress property_address = {
-      selector, scope, kAudioObjectPropertyElementMain};
+      selector, scope, kAudioObjectPropertyElementMaster};
   return property_address;
 }
 
 static const AudioObjectPropertyAddress kNoiseReductionPropertyAddress = {
-    'nzca', kAudioDevicePropertyScopeInput, kAudioObjectPropertyElementMain};
+    'nzca', kAudioDevicePropertyScopeInput, kAudioObjectPropertyElementMaster};
 
 // Get IO buffer size range from HAL given device id and scope.
 static OSStatus GetIOBufferFrameSizeRange(AudioDeviceID device_id,
@@ -100,7 +100,7 @@ static bool HasAudioHardware(AudioObjectPropertySelector selector) {
   const AudioObjectPropertyAddress property_address = {
       selector,
       kAudioObjectPropertyScopeGlobal,  // mScope
-      kAudioObjectPropertyElementMain   // mElement
+      kAudioObjectPropertyElementMaster   // mElement
   };
   UInt32 output_device_id_size = static_cast<UInt32>(sizeof(output_device_id));
   OSStatus err = AudioObjectGetPropertyData(kAudioObjectSystemObject,
@@ -177,7 +177,7 @@ AudioDeviceID AudioManagerMac::GetAudioDeviceIdByUId(
   DCHECK(AudioManager::Get()->GetTaskRunner()->BelongsToCurrentThread());
   AudioObjectPropertyAddress property_address = {
       kAudioHardwarePropertyDevices, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   AudioDeviceID audio_device_id = kAudioObjectUnknown;
   UInt32 device_size = sizeof(audio_device_id);
   OSStatus result = -1;
@@ -231,7 +231,7 @@ static bool GetDefaultDevice(AudioDeviceID* device, bool input) {
   pa.mSelector = input ? kAudioHardwarePropertyDefaultInputDevice
                        : kAudioHardwarePropertyDefaultOutputDevice;
   pa.mScope = kAudioObjectPropertyScopeGlobal;
-  pa.mElement = kAudioObjectPropertyElementMain;
+  pa.mElement = kAudioObjectPropertyElementMaster;
 
   UInt32 size = sizeof(*device);
   OSStatus result = AudioObjectGetPropertyData(kAudioObjectSystemObject, &pa, 0,
@@ -260,7 +260,7 @@ static bool GetDeviceTotalChannelCount(AudioDeviceID device,
   // buffer pointers set to nullptr) which describes the list of streams and the
   // number of channels in each stream.
   AudioObjectPropertyAddress pa = {kAudioDevicePropertyStreamConfiguration,
-                                   scope, kAudioObjectPropertyElementMain};
+                                   scope, kAudioObjectPropertyElementMaster};
 
   UInt32 size;
   OSStatus result = AudioObjectGetPropertyDataSize(device, &pa, 0, 0, &size);
@@ -646,7 +646,7 @@ int AudioManagerMac::HardwareSampleRateForDevice(AudioDeviceID device_id) {
 
   static const AudioObjectPropertyAddress kNominalSampleRateAddress = {
       kAudioDevicePropertyNominalSampleRate, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   OSStatus result = AudioObjectGetPropertyData(device_id,
                                                &kNominalSampleRateAddress,
                                                0,
@@ -849,7 +849,7 @@ std::string AudioManagerMac::GetDefaultDeviceID(bool is_input) {
 
   const AudioObjectPropertyAddress property_address = {
       kAudioDevicePropertyDeviceUID, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   CFStringRef device_uid = NULL;
   UInt32 size = sizeof(device_uid);
   OSStatus status = AudioObjectGetPropertyData(device_id,
diff --git a/src/3rdparty/chromium/media/audio/mac/core_audio_util_mac.cc b/src/3rdparty/chromium/media/audio/mac/core_audio_util_mac.cc
index 7c2d77559..4946af7a8 100644
--- a/src/3rdparty/chromium/media/audio/mac/core_audio_util_mac.cc
+++ b/src/3rdparty/chromium/media/audio/mac/core_audio_util_mac.cc
@@ -43,7 +43,7 @@ absl::optional<std::string> GetDeviceStringProperty(
   UInt32 size = sizeof(property_value);
   AudioObjectPropertyAddress property_address = {
       property_selector, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
 
   OSStatus result = AudioObjectGetPropertyData(
       device_id, &property_address, 0 /* inQualifierDataSize */,
@@ -69,7 +69,7 @@ absl::optional<uint32_t> GetDeviceUint32Property(
     AudioObjectPropertySelector property_selector,
     AudioObjectPropertyScope property_scope) {
   AudioObjectPropertyAddress property_address = {
-      property_selector, property_scope, kAudioObjectPropertyElementMain};
+      property_selector, property_scope, kAudioObjectPropertyElementMaster};
   UInt32 property_value;
   UInt32 size = sizeof(property_value);
   OSStatus result = AudioObjectGetPropertyData(
@@ -85,7 +85,7 @@ uint32_t GetDevicePropertySize(AudioObjectID device_id,
                                AudioObjectPropertySelector property_selector,
                                AudioObjectPropertyScope property_scope) {
   AudioObjectPropertyAddress property_address = {
-      property_selector, property_scope, kAudioObjectPropertyElementMain};
+      property_selector, property_scope, kAudioObjectPropertyElementMaster};
   UInt32 size = 0;
   OSStatus result = AudioObjectGetPropertyDataSize(
       device_id, &property_address, 0 /* inQualifierDataSize */,
@@ -104,7 +104,7 @@ std::vector<AudioObjectID> GetAudioObjectIDs(
     AudioObjectPropertySelector property_selector) {
   AudioObjectPropertyAddress property_address = {
       property_selector, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   UInt32 size = 0;
   OSStatus result = AudioObjectGetPropertyDataSize(
       audio_object_id, &property_address, 0 /* inQualifierDataSize */,
@@ -204,7 +204,7 @@ absl::optional<std::string> TranslateDeviceSource(AudioObjectID device_id,
   UInt32 translation_size = sizeof(AudioValueTranslation);
   AudioObjectPropertyAddress property_address = {
       kAudioDevicePropertyDataSourceNameForIDCFString,
-      InputOutputScope(is_input), kAudioObjectPropertyElementMain};
+      InputOutputScope(is_input), kAudioObjectPropertyElementMaster};
 
   OSStatus result = AudioObjectGetPropertyData(
       device_id, &property_address, 0 /* inQualifierDataSize */,
@@ -291,7 +291,7 @@ bool IsPrivateAggregateDevice(AudioObjectID device_id) {
 
   const AudioObjectPropertyAddress property_address = {
       kAudioAggregateDevicePropertyComposition, kAudioObjectPropertyScopeGlobal,
-      kAudioObjectPropertyElementMain};
+      kAudioObjectPropertyElementMaster};
   CFDictionaryRef dictionary = nullptr;
   UInt32 size = sizeof(dictionary);
   OSStatus result = AudioObjectGetPropertyData(
@@ -401,7 +401,7 @@ base::TimeDelta GetHardwareLatency(AudioUnit audio_unit,
 
   // Get audio device latency.
   AudioObjectPropertyAddress property_address = {
-      kAudioDevicePropertyLatency, scope, kAudioObjectPropertyElementMain};
+      kAudioDevicePropertyLatency, scope, kAudioObjectPropertyElementMaster};
   UInt32 device_latency_frames = 0;
   size = sizeof(device_latency_frames);
   result = AudioObjectGetPropertyData(device_id, &property_address, 0, nullptr,
diff --git a/src/3rdparty/chromium/media/base/mac/color_space_util_mac.mm b/src/3rdparty/chromium/media/base/mac/color_space_util_mac.mm
index 8bc8179ca..79db70622 100644
--- a/src/3rdparty/chromium/media/base/mac/color_space_util_mac.mm
+++ b/src/3rdparty/chromium/media/base/mac/color_space_util_mac.mm
@@ -272,7 +272,7 @@ bool GetImageBufferProperty(CFTypeRef value_untyped,
   base::apple::ScopedCFTypeRef<CFTypeRef> gamma_level;
   base::apple::ScopedCFTypeRef<CFTypeRef> ycbcr_matrix;
 
-  if (@available(macOS 12, iOS 15, *)) {
+  /*if (@available(macOS 12, iOS 15, *)) {
     color_primaries.reset(CVBufferCopyAttachment(
         image_buffer, kCVImageBufferColorPrimariesKey, nullptr));
     transfer_function.reset(CVBufferCopyAttachment(
@@ -281,7 +281,7 @@ bool GetImageBufferProperty(CFTypeRef value_untyped,
         image_buffer, kCVImageBufferGammaLevelKey, nullptr));
     ycbcr_matrix.reset(CVBufferCopyAttachment(
         image_buffer, kCVImageBufferYCbCrMatrixKey, nullptr));
-  } else {
+  } else {*/
 #if !defined(__IPHONE_15_0) || __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_15_0
     color_primaries.reset(
         CVBufferGetAttachment(image_buffer, kCVImageBufferColorPrimariesKey,
@@ -298,7 +298,7 @@ bool GetImageBufferProperty(CFTypeRef value_untyped,
                            image_buffer, kCVImageBufferYCbCrMatrixKey, nullptr),
                        base::scoped_policy::RETAIN);
 #endif
-  }
+  /*}*/
 
   return GetCoreVideoColorSpaceInternal(color_primaries.get(),
                                         transfer_function.get(),
diff --git a/src/3rdparty/chromium/media/base/mac/video_frame_mac.mm b/src/3rdparty/chromium/media/base/mac/video_frame_mac.mm
index e196ef138..ef4f0d8b2 100644
--- a/src/3rdparty/chromium/media/base/mac/video_frame_mac.mm
+++ b/src/3rdparty/chromium/media/base/mac/video_frame_mac.mm
@@ -51,13 +51,13 @@ bool IsAcceptableCvPixelFormat(VideoPixelFormat format, OSType cv_format) {
 }
 
 bool CvPixelBufferHasColorSpace(CVPixelBufferRef pixel_buffer) {
-  if (@available(macOS 12, iOS 15, *)) {
+  /*if (@available(macOS 12, iOS 15, *)) {
     return CVBufferHasAttachment(pixel_buffer,
                                  kCVImageBufferColorPrimariesKey) &&
            CVBufferHasAttachment(pixel_buffer,
                                  kCVImageBufferTransferFunctionKey) &&
            CVBufferHasAttachment(pixel_buffer, kCVImageBufferYCbCrMatrixKey);
-  } else {
+  } else {*/
 #if !defined(__IPHONE_15_0) || __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_15_0
     return CVBufferGetAttachment(pixel_buffer, kCVImageBufferColorPrimariesKey,
                                  nullptr) &&
@@ -68,7 +68,7 @@ bool CvPixelBufferHasColorSpace(CVPixelBufferRef pixel_buffer) {
 #else
     return false;
 #endif
-  }
+  /*}*/
 }
 
 void SetCvPixelBufferColorSpace(const gfx::ColorSpace& frame_cs,
diff --git a/src/3rdparty/chromium/media/capture/video/apple/video_capture_device_avfoundation.mm b/src/3rdparty/chromium/media/capture/video/apple/video_capture_device_avfoundation.mm
index 7e811f668..ce28d5d5e 100644
--- a/src/3rdparty/chromium/media/capture/video/apple/video_capture_device_avfoundation.mm
+++ b/src/3rdparty/chromium/media/capture/video/apple/video_capture_device_avfoundation.mm
@@ -348,9 +348,9 @@ - (BOOL)setCaptureDevice:(NSString*)deviceId
     [self stopPhotoOutput];
     if (_captureDeviceInput) {
       DCHECK(_captureDevice);
-      if (@available(macOS 12.0, *)) {
+      /*if (@available(macOS 12.0, *)) {
         [_captureDevice removeObserver:self forKeyPath:@"portraitEffectActive"];
-      }
+      }*/
       [_captureSession stopRunning];
       [_captureSession removeInput:_captureDeviceInput];
       _captureDeviceInput = nil;
@@ -393,12 +393,12 @@ - (BOOL)setCaptureDevice:(NSString*)deviceId
   [_captureVideoDataOutput setSampleBufferDelegate:self queue:_sampleQueue];
   [_captureSession addOutput:_captureVideoDataOutput];
 
-  if (@available(macOS 12.0, *)) {
+  /*if (@available(macOS 12.0, *)) {
     [_captureDevice addObserver:self
                      forKeyPath:@"portraitEffectActive"
                         options:0
                         context:(__bridge void*)_captureDevice];
-  }
+  }*/
 
 #if BUILDFLAG(IS_IOS)
   _orientation = [[UIDevice currentDevice] orientation];
@@ -1127,9 +1127,9 @@ - (bool)isPortraitEffectSupported {
   if (_isPortraitEffectSupportedForTesting.has_value()) {
     return _isPortraitEffectSupportedForTesting.value();
   }
-  if (@available(macOS 12.0, *)) {
+  /*if (@available(macOS 12.0, *)) {
     return _captureDevice.activeFormat.portraitEffectSupported;
-  }
+  }*/
   return false;
 }
 
@@ -1148,9 +1148,9 @@ - (bool)isPortraitEffectActive {
   if (_isPortraitEffectActiveForTesting.has_value()) {
     return _isPortraitEffectActiveForTesting.value();
   }
-  if (@available(macOS 12.0, *)) {
+  /*if (@available(macOS 12.0, *)) {
     return _captureDevice.portraitEffectActive;
-  }
+  }*/
   return false;
 }
 
@@ -1158,11 +1158,11 @@ - (void)observeValueForKeyPath:(NSString*)keyPath
                       ofObject:(id)object
                         change:(NSDictionary*)change
                        context:(void*)context {
-  if (@available(macOS 12.0, *)) {
+  /*if (@available(macOS 12.0, *)) {
     if ([keyPath isEqual:@"portraitEffectActive"]) {
       [self captureConfigurationChanged];
     }
-  }
+  }*/
 }
 
 - (void)captureConfigurationChanged {
diff --git a/src/3rdparty/chromium/media/gpu/mac/vt_video_encode_accelerator_mac.cc b/src/3rdparty/chromium/media/gpu/mac/vt_video_encode_accelerator_mac.cc
index 06e1d311a..4e6225b2f 100644
--- a/src/3rdparty/chromium/media/gpu/mac/vt_video_encode_accelerator_mac.cc
+++ b/src/3rdparty/chromium/media/gpu/mac/vt_video_encode_accelerator_mac.cc
@@ -69,16 +69,16 @@ bool IsSVCSupported(const VideoCodec& codec) {
 #if BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER) && defined(ARCH_CPU_ARM_FAMILY)
   // macOS 14.0+ support SVC HEVC encoding for Apple Silicon chips only.
   if (codec == VideoCodec::kHEVC) {
-    if (__builtin_available(macOS 14.0, iOS 17.0, *)) {
+    /*if (__builtin_available(macOS 14.0, iOS 17.0, *)) {
       return true;
-    }
+    }*/
     return false;
   }
 #endif  // BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER) &&
         // defined(ARCH_CPU_ARM_FAMILY)
-  if (__builtin_available(macOS LOW_LATENCY_AND_SVC_AVAILABLE_VER, *)) {
+  /*if (__builtin_available(macOS LOW_LATENCY_AND_SVC_AVAILABLE_VER, *)) {
     return codec == VideoCodec::kH264;
-  }
+  }*/
   return false;
 }
 
@@ -751,13 +751,13 @@ bool VTVideoEncodeAccelerator::CreateCompressionSession(
   }
 #endif
 
-  if (__builtin_available(macOS LOW_LATENCY_AND_SVC_AVAILABLE_VER, *)) {
+  /*if (__builtin_available(macOS LOW_LATENCY_AND_SVC_AVAILABLE_VER, *)) {
     if (require_low_delay_ && IsSVCSupported(codec)) {
       encoder_keys.push_back(
           kVTVideoEncoderSpecification_EnableLowLatencyRateControl);
       encoder_values.push_back(kCFBooleanTrue);
     }
-  }
+  }*/
   base::apple::ScopedCFTypeRef<CFDictionaryRef> encoder_spec =
       video_toolbox::DictionaryWithKeysAndValues(
           encoder_keys.data(), encoder_values.data(), encoder_keys.size());
@@ -870,7 +870,7 @@ bool VTVideoEncodeAccelerator::ConfigureCompressionSession(VideoCodec codec) {
     return false;
   }
 
-  if (__builtin_available(macOS LOW_LATENCY_AND_SVC_AVAILABLE_VER, *)) {
+  /*if (__builtin_available(macOS LOW_LATENCY_AND_SVC_AVAILABLE_VER, *)) {
     if (!session_property_setter.IsSupported(
             kVTCompressionPropertyKey_BaseLayerFrameRateFraction)) {
       NotifyErrorStatus({EncoderStatus::Codes::kEncoderUnsupportedConfig,
@@ -883,7 +883,7 @@ bool VTVideoEncodeAccelerator::ConfigureCompressionSession(VideoCodec codec) {
                          "Setting BaseLayerFrameRate property failed"});
       return false;
     }
-  }
+  }*/
 
   return true;
 }
diff --git a/src/3rdparty/chromium/net/cert/x509_util_apple.cc b/src/3rdparty/chromium/net/cert/x509_util_apple.cc
index 415acbd5a..2eb891b0c 100644
--- a/src/3rdparty/chromium/net/cert/x509_util_apple.cc
+++ b/src/3rdparty/chromium/net/cert/x509_util_apple.cc
@@ -147,10 +147,10 @@ SHA256HashValue CalculateFingerprint256(SecCertificateRef cert) {
 
 base::apple::ScopedCFTypeRef<CFArrayRef> CertificateChainFromSecTrust(
     SecTrustRef trust) {
-  if (__builtin_available(macOS 12.0, iOS 15.0, *)) {
+  /*if (__builtin_available(macOS 12.0, iOS 15.0, *)) {
     return base::apple::ScopedCFTypeRef<CFArrayRef>(
         SecTrustCopyCertificateChain(trust));
-  }
+  }*/
 
 // TODO(crbug.com/1426476): Remove code when it is no longer needed.
 #if (BUILDFLAG(IS_MAC) &&                                    \
diff --git a/src/3rdparty/chromium/services/shape_detection/barcode_detection_impl_mac_vision_api.mm b/src/3rdparty/chromium/services/shape_detection/barcode_detection_impl_mac_vision_api.mm
index 1696112d5..ab12fd63d 100644
--- a/src/3rdparty/chromium/services/shape_detection/barcode_detection_impl_mac_vision_api.mm
+++ b/src/3rdparty/chromium/services/shape_detection/barcode_detection_impl_mac_vision_api.mm
@@ -18,7 +18,7 @@
   ~VisionAPI() override = default;
 
   NSArray<VNBarcodeSymbology>* GetSupportedSymbologies() const override {
-    if (@available(macOS 12.0, *)) {
+    /*if (@available(macOS 12.0, *)) {
       VNDetectBarcodesRequest* barcodes_request =
           [[VNDetectBarcodesRequest alloc] init];
       NSError* error = nil;
@@ -28,9 +28,9 @@
         DLOG(ERROR) << base::SysNSStringToUTF8(error.localizedDescription);
       }
       return symbologies;
-    } else {
+    } else {*/
       return VNDetectBarcodesRequest.supportedSymbologies;
-    }
+    /*}*/
   }
 };
 
diff --git a/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/mac/arch_utilities.cc b/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/mac/arch_utilities.cc
index 96340d544..48cfaf1ff 100644
--- a/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/mac/arch_utilities.cc
+++ b/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/mac/arch_utilities.cc
@@ -95,13 +95,13 @@ ArchInfo GetLocalArchInfo(void) {
 #ifdef __APPLE__
 
 std::optional<ArchInfo> GetArchInfoFromName(const char* arch_name) {
-  if (__builtin_available(macOS 13.0, iOS 16.0, *)) {
+  /*if (__builtin_available(macOS 13.0, iOS 16.0, *)) {
     cpu_type_t type;
     cpu_subtype_t subtype;
     if (macho_cpu_type_for_arch_name(arch_name, &type, &subtype)) {
       return ArchInfo{type, subtype};
     }
-  } else {
+  } else {*/
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wdeprecated-declarations"
     const NXArchInfo* info = NXGetArchInfoFromName(arch_name);
@@ -109,17 +109,17 @@ std::optional<ArchInfo> GetArchInfoFromName(const char* arch_name) {
     if (info) {
       return ArchInfo{info->cputype, info->cpusubtype};
     }
-  }
+  /*}*/
   return std::nullopt;
 }
 
 const char* GetNameFromCPUType(cpu_type_t cpu_type, cpu_subtype_t cpu_subtype) {
-  if (__builtin_available(macOS 13.0, iOS 16.0, *)) {
+  /*if (__builtin_available(macOS 13.0, iOS 16.0, *)) {
     const char* name = macho_arch_name_for_cpu_type(cpu_type, cpu_subtype);
     if (name) {
       return name;
     }
-  } else {
+  } else {*/
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wdeprecated-declarations"
     const NXArchInfo* info = NXGetArchInfoFromCpuType(cpu_type, cpu_subtype);
@@ -127,7 +127,7 @@ const char* GetNameFromCPUType(cpu_type_t cpu_type, cpu_subtype_t cpu_subtype) {
     if (info) {
       return info->name;
     }
-  }
+  /*}*/
 
   return kUnknownArchName;
 }
diff --git a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/BackendMTL.mm b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/BackendMTL.mm
index 29caf3544..be335c424 100644
--- a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/BackendMTL.mm
+++ b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/BackendMTL.mm
@@ -389,10 +389,10 @@ void SetupBackendDeviceToggles(TogglesState* deviceToggles) const override {
             gpu_info::IsAMDGCN3(vendorId, deviceId)) {
             isLessThanAMDGN4OrMac13Dot1 = true;
         } else if (gpu_info::IsAMD(vendorId)) {
-            if (@available(macos 13.1, *)) {
-            } else {
+            /*if (@available(macos 13.1, *)) {
+            } else {*/
                 isLessThanAMDGN4OrMac13Dot1 = true;
-            }
+            /*}*/
         }
         if (isLessThanAMDGN4OrMac13Dot1) {
             deviceToggles->Default(
diff --git a/src/3rdparty/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm b/src/3rdparty/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm
index 6e0f07f5e..d6b42411f 100644
--- a/src/3rdparty/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm
+++ b/src/3rdparty/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm
@@ -814,13 +814,13 @@ void HandleAccelerator(const ui::Accelerator& accelerator,
   // trying to activate a window in a remote application host, this yield
   // should make sure this works as long as chrome is the currently active
   // application.
-  if (@available(macOS 14, *)) {
+  /*if (@available(macOS 14, *)) {
     if (application_host_ &&
         new_state == WindowVisibilityState::kShowAndActivateWindow) {
       [NSApp yieldActivationToApplicationWithBundleIdentifier:
                  base::SysUTF8ToNSString(application_host_->bundle_id())];
     }
-  }
+  }*/
   GetNSWindowMojo()->SetVisibilityState(new_state);
 }
 
-- 
2.39.2 (Apple Git-143)

